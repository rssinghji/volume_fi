// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: flight.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Flight_Calculate_FullMethodName = "/Flight/Calculate"
)

// FlightClient is the client API for Flight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightClient interface {
	Calculate(ctx context.Context, in *CalculatePathRequest, opts ...grpc.CallOption) (*CalculatePathResponse, error)
}

type flightClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightClient(cc grpc.ClientConnInterface) FlightClient {
	return &flightClient{cc}
}

func (c *flightClient) Calculate(ctx context.Context, in *CalculatePathRequest, opts ...grpc.CallOption) (*CalculatePathResponse, error) {
	out := new(CalculatePathResponse)
	err := c.cc.Invoke(ctx, Flight_Calculate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightServer is the server API for Flight service.
// All implementations must embed UnimplementedFlightServer
// for forward compatibility
type FlightServer interface {
	Calculate(context.Context, *CalculatePathRequest) (*CalculatePathResponse, error)
	mustEmbedUnimplementedFlightServer()
}

// UnimplementedFlightServer must be embedded to have forward compatible implementations.
type UnimplementedFlightServer struct {
}

func (UnimplementedFlightServer) Calculate(context.Context, *CalculatePathRequest) (*CalculatePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedFlightServer) mustEmbedUnimplementedFlightServer() {}

// UnsafeFlightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightServer will
// result in compilation errors.
type UnsafeFlightServer interface {
	mustEmbedUnimplementedFlightServer()
}

func RegisterFlightServer(s grpc.ServiceRegistrar, srv FlightServer) {
	s.RegisterService(&Flight_ServiceDesc, srv)
}

func _Flight_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flight_Calculate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightServer).Calculate(ctx, req.(*CalculatePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Flight_ServiceDesc is the grpc.ServiceDesc for Flight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Flight",
	HandlerType: (*FlightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _Flight_Calculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flight.proto",
}
